#%RAML 0.8

# PMN SDN Conrtoller API Specification : Topology API
# (c) ?

title: Topology
baseUri: http://example.api.com/pmn-sdn/{version}/topology
version: v1
mediaType: application/json
schemas:
  - NetworkDevice: !include schemas/networkdevice.json
    NetworkDevices: !include schemas/networkdevices.json
    Endpoint: !include schemas/endpoint.json
    Endpoints: !include schemas/endpoints.json
    NetworkLink: !include schemas/networklink.json
    NetworkLinks: !include schemas/networklinks.json
    EndpointLink: !include schemas/endpointlink.json
    EndpointLinks: !include schemas/endpointlinks.json
documentation:
  - title: Overview
    content: |
      These routines enable applications to learn about the topology managed by the network controller. The BC can get the topology at any time and can also register to receive the updates from the network.  The topology consists of network devices, its interfaces, links between devices and endpoints.    While the network devices are discovered, the endpoints information is received by the NC  through the PMN API. This is primarily because the vast majority of endpoints at this current time do not support any discovery protocol such as LLDP.  

/:
  displayName: Base
  get:
    description: List the resources that can be accessed from the base url
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-base-get-200.json

/network-devices:
  displayName: Network Devices
  get:
    description: List all the network devices
    responses:
      200:
        body:
          schema: !include schemas/networkdevices.json
          example: !include ../examples/topologyapi-v1.0-networkdevices-get-200.json
  /{id}:
    uriParameters:
      id:
        type: string
        description: The unique identifier for the Device. Mac-address is used
        pattern:^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$
    get:
      description: Get a single Network Device
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-networkdeviceid-get-200.json
            schema: !include schemas/networkdevice.json
        404:
          description: Returned when the requested Node ID does not exist
          body:
    patch:
      description: Update an existing endpoint interface
      body:
        example: !include ../examples/topologyapi-v1.0-networkdevice-patch-request.json
        schema: !include schemas/topologyapi-v1.0-networkdevice-patch-request.json
      responses:
        200:
          description: Returned when the PATCH request is handled successfully
        403:
          description: Returned when a PATCH request is made against a non-persistent endpoint which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
/endpoints:
  displayName: Endpoints
  get:
    description: List all the endpoint interfaces
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-endpoints-get-200.json
          schema: !include schemas/endpoints.json

  post:
    description: Register a new endpoint interface. The POST is invoked to inform the network controller about the presence of an endpoint interface connected to the network. There are three types of endpoints 1. LLDP capable endpoints which advertise the chassis ID and port ID that is the same that is same as the one mentioned in this API 2. Not LLDP capable but sends some data traffic that will have the MAC address of the interface which will be the same as the portID that is mentioned in this API and the chassisID will be empty 3. RX only endpoint which is not capable of sending any data to the network switches but only receives
       LLDP sent from the switch , understands where it is connected to and relays the switch interface
       information to the RDS which is what is captured in the chassis ID and port ID
    body:
      example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
      schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
    responses:
      201:
        body:
          example: !include ../examples/topologyapi-v1.0-endpoints-post-201.json
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
        body:
          schema: !include schemas/error.json

  /{id}:
    uriParameters:
      id:
        type: string
        description: The unique identifier for the Device. Mac-address is used
        pattern:^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$

    get:
      description: Get a single Endpoint
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpointid-get-200.json
            schema: !include schemas/endpoint.json
        404:
          description: Returned when the requested Node ID does not exist
          body:
    put:
      description: Update an existing endpoint
      body:
        example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
        schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-put-202.json
        403:
          description: Returned when a PUT request is made against a non-persistent endpoint which is managed by the Topology API and cannot be updated
        404:
          description: Returned when the requested Node ID does not exist

    patch:
      description: Upsert an existing endpoint interface
      body:
        example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
        schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-patch-202.json
        403:
          description: Returned when a PATCH request is made against a non-persistent endpoint which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist

    delete:
      description: delete an existing endpoint interface
      responses:
        204:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-delete-200.json
        403:
          description: Returned when a DELETE request is made against a non-persistent endpoint which is managed by the Topology API and cannot be deleted
        404:
          description: Returned when the requested Endpoint ID does not exist

/network-links:
  displayName: Network Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-networklinks-get-200.json
          schema: !include schemas/networklinks.json

/endpoint-links:
  displayName: Endpoint Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-endpointlinks-get-200.json
          schema: !include schemas/endpointlinks.json


/subscriptions:
  displayName: Subscriptions
  post:
    description: Create a websocket subscription to an API resource
    body:
      example: !include ../examples/topologyapi-v1.0-subscriptions-post-request.json
    responses:
      201:
        body:
          example: !include ../examples/topologyapi-v1.0-subscriptions-get-200.json
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
  get:
    description: List active connections to websockets providing real-time updates on resource changes
    body:
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-subscriptions-get-200.json

  /{id}:
    uriParameters:
      id:
        type: string
        description: The unique identifier for the Device. Mac-address is used
        pattern:^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$

