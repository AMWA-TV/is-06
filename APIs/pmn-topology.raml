#%RAML 1.0

# AMWA-nmos Network Conrtoller API
# (c) ?

title: Topology
baseUri: http://example.api.com/x-nmos/netctrl/{version}
version: v1.0
mediaType: application/json
schemas:
  - NetworkDevice: !include schemas/networkdevice.json
    NetworkDevices: !include schemas/networkdevices.json
    Endpoint: !include schemas/endpoint.json
    Endpoints: !include schemas/endpoints.json
    NetworkLink: !include schemas/networklink.json
    NetworkLinks: !include schemas/networklinks.json
    EndpointLink: !include schemas/endpointlink.json
    EndpointLinks: !include schemas/endpointlinks.json
uses:
  flow: schemas/network-flow.raml
documentation:
  - title: Overview
    content: |
      These routines enable applications to learn about the topology managed by the network controller. The BC can get the topology at any time and can also register to receive the updates from the network.  The topology consists of network devices, its interfaces, links between devices and endpoints.    While the network devices are discovered, the endpoints information is received by the NC  through the PMN API. This is primarily because the vast majority of endpoints at this current time do not support any discovery protocol such as LLDP.  

/:
  displayName: Base
  get:
    description: List the resources that can be accessed from the base url
    responses:
      200:
        body:
          example: !include ../examples/netctrl-v1.0-base-get-200.json

/network-devices:
  displayName: Network Devices
  get:
    description: List all the network devices
    responses:
      200:
        body:
          schema: !include schemas/networkdevices.json
          example: !include ../examples/topologyapi-v1.0-networkdevices-get-200.json
  /{id}:
    uriParameters:
      id:
        type: string
    get:
      description: Get a single Network Device
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-networkdeviceid-get-200.json
            schema: !include schemas/networkdevice.json
        404:
          description: Returned when the requested Node ID does not exist
          body:
    patch:
      description: Update an existing endpoint interface
      body:
        example: !include ../examples/topologyapi-v1.0-networkdevice-patch-request.json
        schema: !include schemas/topologyapi-v1.0-networkdevice-patch-request.json
      responses:
        200:
          description: Returned when the PATCH request is handled successfully
        403:
          description: Returned when a PATCH request is made against a non-persistent endpoint which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
/endpoints:
  displayName: Endpoints
  get:
    description: List all the endpoint interfaces
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-endpoints-get-200.json
          schema: !include schemas/endpoints.json

  post:
    description: Register a new endpoint interface. The POST is invoked to inform the network controller about the presence of an endpoint interface connected to the network. There are three types of endpoints 1. LLDP capable endpoints which advertise the chassis ID and port ID that is the same that is same as the one mentioned in this API 2. Not LLDP capable but sends some data traffic that will have the MAC address of the interface which will be the same as the portID that is mentioned in this API and the chassisID will be empty 3. RX only endpoint which is not capable of sending any data to the network switches but only receives
       LLDP sent from the switch , understands where it is connected to and relays the switch interface
       information to the RDS which is what is captured in the chassis ID and port ID
    body:
      example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
      schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
    responses:
      201:
        body:
          description: Returned when the POST request is successful. Respone contains the id of the endpoint.
          type: string
          example: sjc-9c41
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
        body:
          schema: !include schemas/error.json

  /{endpoint-id}:
    uriParameters:
      endpoint-id:
        type: string

    get:
      description: Get a single Endpoint
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpointid-get-200.json
            schema: !include schemas/endpoint.json
        404:
          description: Returned when the requested endpoint with id does not exist
          body:
    put:
      description: Update an existing endpoint
      body:
        example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
        schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-put-202.json
        403:
          description: Returned when a PUT request is made against a non-persistent endpoint which is managed by the Topology API and cannot be updated
        404:
          description: Returned when the requested endpoint id does not exist

    patch:
      description: Upsert an existing endpoint interface
      body:
        example: !include ../examples/topologyapi-v1.0-endpoints-post-request.json
        schema: !include schemas/topologyapi-v1.0-endpoints-post-request.json
      responses:
        200:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-patch-202.json
        403:
          description: Returned when a PATCH request is made against a non-persistent endpoint which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist

    delete:
      description: delete an existing endpoint interface
      responses:
        204:
          body:
            example: !include ../examples/topologyapi-v1.0-endpoints-delete-200.json
        403:
          description: Returned when a DELETE request is made against a non-persistent endpoint which is managed by the Topology API and cannot be deleted
        404:
          description: Returned when the requested Endpoint ID does not exist
    ## Phase II addiion
    /application:
      displayName: application
      get:
        description: Retrieve all applications defined for this endpoint
        responses:
          200:
            body:
              type: flow.Application[]
      post:
        description: Create a new application for this endpoint for the first time 
        body:
          type: flow.Application
          example: !include ../examples/netctrl-v1.0-application-post.json
        responses:
          200:
            description: Returned when the POST request is a success and the application has been created. The response contains the new application id.
            body:
              type: string
              example: app-6t4y3
          400:
            description: Returned when the POST request is incorrectly formatted or provided wrong value.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the endpoint does not exist.
      /{application-id}:
        uriParameters:
          application-id:
            type: string
        get:
          description: Retrieve a single application for this endpoint with application id
          responses:
            200:
              body:
                type: flow.Application
                example: !include ../examples/netctrl-v1.0-application-get-200.json
        patch:
          description: Modify the application with application id.
          body:
            type: flow.Application
            example: !include ../examples/netctrl-v1.0-application-post.json
          responses:
            200:
              description: Returned when the PATCH request is a success and the application has been modified. No response body.
            400:
              description: Returned when the PATCH request is incorrectly formatted or missing values.
              body:
                type: !include schemas/error.json
            404:
              description: Returned when the application does not exist for this endpoint.
        delete:
          description: Delete the application.
          responses:
            200:
              description: Returned when the application is successfully deleted. No response body.
            404:
              description: Returned when the application does not exist.
        /register:
          displayName: Application-Role
          get:
            description: Retrieves the role of this application, as a sender, receiver, or both
            responses:
              200:
                body: flow.ApplicationRole
                example: Both
          post:
            description: Register this application for the first time
            body:
              type: flow.ApplicationRole
              example: Receiver
            responses:
              200:
                description: Returned when the POST request is a success and the application role has been registered. No response body.
              400:
                description: Returned when the POST request is incorrectly formatted or provided wrong value.
                body:
                  type: !include schemas/error.json
              404:
                description: Returned when the application does not exist in this endpoint.
              403:
                description: Returned when the application already has a role assigned.
          patch:
            description: Modify the role of this application
            body:
              type: flow.ApplicationRole
              example: Sender
            responses:
              200:
                description: Returned when the PATCH request is a success and the application role has been modified. No response body.
              400:
                description: Returned when the PATCH request is incorrectly formatted or missing values.
                body:
                  type: !include schemas/error.json
              404:
                description: Returned when the application does not exist for this endpoint.
              403:
                description: Returned when the application does not have a previous role assigned. 
          delete:
            description: Delete the role for this application.
            responses:
              200:
                description: Returned when the application role is successfully deleted. No response body.
              404:
                description: Returned when the application does not exist.

/network-links:
  displayName: Network Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-networklinks-get-200.json
          schema: !include schemas/networklinks.json

/endpoint-links:
  displayName: Endpoint Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          example: !include ../examples/topologyapi-v1.0-endpointlinks-get-200.json
          schema: !include schemas/endpointlinks.json


## Phase II addiion
/network-flow:
  displayName: Network-flow
  get:
    description: Retrieve all network flows.
    responses:
      200:
        body: flow.Flows
        example: !include ../examples/netctrl-v1.0-network-flow-get-200.json
  /unicast-network-flow:
    displayName: Unicast-Network-flow
    get:
      description: Retrieve all unicast network flows.
      responses:
        200:
          body: flow.UnicastFlow[]
          example: !include ../examples/netctrl-v1.0-unicast-network-flow-get-200.json
    post:
      description: Create a new unicast network flow. 
      body:
        type: flow.UnicastFlow
        example: !include ../examples/netctrl-v1.0-unicast-network-flow-post.json
      responses:
        201:
          description: Returned when the unicast network flow creation is successful. The response contains the id of the new flow created.
          body:
            type: string
            example: flow-id-f56098
        400:
          description: Returned when the POST request is incorrectly formatted or missing values.
          body:
            type: !include schemas/error.json
        404:
          description: Returned when the source or the destination of the network flow does not exist.
        403:
          description: Returned when the source or destination of the flow can not be used as such, i.e., their roles are not defined as sender (both) and receiver (both), respectively. 
    
    /{id}:
      uriParameters:
        id:
          type: string
      get:
        description: Retrieve a single unicast network flow.
        responses:
          200:
            body: flow.UnicastFlow
            example: !include ../examples/netctrl-v1.0-unicast-network-flow-get-200.json
      patch:
        description: Update an existing unicast network flow. 
        body:
          type: flow.UnicastFlow
          example: !include ../examples/netctrl-v1.0-unicast-network-flow-post.json
        responses:
          201:
            description: Returned when the unicast network flow update is successful. No response body.
          400:
            description: Returned when the PATCH request is incorrectly formatted or missing values.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the network flow or the source or the destination does not exist.
          403:
            description: Returned when the network flow can not be updated, maybe for permission or security reasons, or the source and the destination can not be used as such, i.e., their roles are not defined as sender (both) and receiver (both), respectively.
      delete:
        description: Delete the network flow.
        responses:
          200:
            description: Returned when the network flow is successfully deleted. No response body.
          404:
            description: Returned when the network flow does not exist.

  /multicast-network-flow:
    displayName: Multicast-Network-flow
    get:
      description: Retrieve all the multicast network flow.
      responses:
        200:
          body:
            body: flow.MulticastFlow[]
            example: !include ../examples/netctrl-v1.0-multicast-network-flow-get-200.json
    post:
      description: Create a new multicast network flow. 
      body:
        type: flow.MulticastFlow
        example: !include ../examples/netctrl-v1.0-multicast-network-flow-post.json
      responses:
        201:
          description: Returned when the multicast network flow creation is successful. The response contains the id of the new flow created.
          body:
            type: string
            example: multi-flow-e253904
        400:
          description: Returned when the POST request is incorrectly formatted or missing values.
          body:
            type: !include schemas/error.json
        404:
          description: Returned when the source or the destinations of the network flow do not exist.
        403:
          description: Returned when the source or the destinations of the flow can not be used as such, i.e., their roles are not defined as sender (both) and receiver (both), respectively. 
    
    /{id}:
      uriParameters:
        id:
          type: string
      get:
        description: Retrieve a single multicast network flow.
        responses:
          200:
            body: flow.MulticastFlow
            example: !include ../examples/netctrl-v1.0-multicast-network-flow-get-200.json
      patch:
        description: Update this existing multicast network flow. 
        body:
          type: flow.MulticastFlow
          example: !include ../examples/netctrl-v1.0-multicast-network-flow-post.json
        responses:
          201:
            description: Returned when the multicast network flow update is successful. No response body.
          400:
            description: Returned when the PATCH request is incorrectly formatted or missing values.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the network flow or the source or the destinations do not exist.
          403:
            description: Returned when the network flow can not be updated, maybe for permission or security reasons, or the source and the destination can not be used as such, i.e., their roles are not defined as sender (both) and receiver (both), respectively.
      delete:
        description: Delete this multicast network flow.
        responses:
          200:
            description: Returned when the network flow is successfully deleted. No response body.
          404:
            description: Returned when the network flow does not exist.
      /listener:
        get:
          description: Retrieve all listeners (receiver) of this multicast flow.
          responses:
            200:
              body: flow.FlowEndpoint[]
              example: !include ../examples/netctrl-v1.0-multicast-network-flow-listener-get-200.json
        post:
          description: Add a new listener to this multicast flow. 
          body:
            type: flow.FlowEndpoint
            example: !include ../examples/netctrl-v1.0-multicast-network-flow-listener-post.json
          responses:
            201:
              description: Returned when the new listener is add to this multicast flow. No response body.
            400:
              description: Returned when the POST request is incorrectly formatted or missing values.
              body:
                type: !include schemas/error.json
            404:
              description: Returned when the listener does not exist.
            403:
              description: Returned when the listener is not asigned the role receiver (both).
        delete:
          description: Delete an existing listener of this multicast flow.
          queryParameters:
            endpoint-id:
              type: string
              description: Id of the endpoint as defined in FlowEndpoint.
              required: true
              example: mxd-disp-9
            application-id:
              type: string
              description: Id of the application as defined in FlowEndpoint.
              required: true
              example: vid-player
            port:
              type: integer
              description: Port address of the listener as defined in FlowEndpoint.
              required: true
              example: 2375
          responses:
            200:
              description: Returned when this listener of this multicast flow is successfully deleted. No response body.
            400:
              description: Returned when the listener does not exist or the DELETE request is not provided with sufficient parameters.

