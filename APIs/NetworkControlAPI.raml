#%RAML 1.0

# AMWA-nmos Network Conrtoller API
# (c) ?

title: Topology
baseUri: http://example.api.com/x-nmos/netctrl/{version}
version: v1.0
mediaType: application/json
types:
  - NetworkDevice: !include schemas/networkdevice.json
    NetworkDevices: !include schemas/networkdevices.json
    Endpoint: !include schemas/endpoint.json
    Endpoints: !include schemas/endpoints.json
    NetworkLink: !include schemas/networklink.json
    NetworkLinks: !include schemas/networklinks.json
    EndpointLink: !include schemas/endpointlink.json
    EndpointLinks: !include schemas/endpointlinks.json
documentation:
  - title: Overview
    content: |
      These routines enable applications to learn about the topology managed by the network controller.
      The BC can get the topology at any time and can also register to receive the updates from the network. 
      The topology consists of network devices, its interfaces, links between devices and endpoints.
      While the network devices are discovered, the endpoints information is received by the NC through the PMN API.
      This is primarily because the vast majority of endpoints at this current time do not support any discovery
      protocol such as LLDP.

/:
  displayName: Base
  get:
    description: List the resources that can be accessed from the base url
    responses:
      200:
        body:
          example: !include ../examples/netctrl-v1.0-base-get-200.json

/network-devices:
  displayName: Network Devices
  get:
    description: List all the network devices
    responses:
      200:
        body:
          type: !include schemas/networkdevices.json
          example: !include ../examples/netctrl-v1.0-networkdevices-get-200.json
  /{id}:
    uriParameters:
      id:
        type: string
    get:
      description: Get a single Network Device
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            type: !include schemas/networkdevice.json
            example: !include ../examples/netctrl-v1.0-networkdeviceid-get-200.json
        404:
          description: Returned when the requested Node ID does not exist
          body:
    patch:
      description: Update an existing endpoint interface
      body:
        type: !include schemas/netctrl-v1.0-networkdevice-patch-request.json
        example: !include ../examples/netctrl-v1.0-networkdevice-patch-request.json
      responses:
        200:
          description: Returned when the PATCH request is handled successfully
        403:
          description: >
            Returned when a PATCH request is made against a non-persistent endpoint which is 
            managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
/endpoints:
  displayName: Endpoints
  get:
    description: List all the endpoint interfaces
    responses:
      200:
        body:
          type: !include schemas/endpoints.json
          example: !include ../examples/netctrl-v1.0-endpoints-get-200.json

  post:
    description: >
      Register a new endpoint interface. The POST is invoked to inform the network controller
      about the presence of an endpoint interface connected to the network. There are three 
      types of endpoints --
      1. LLDP capable endpoints which advertise the chassis ID and port ID that is the same 
        that is same as the one mentioned in this API 
      2. Not LLDP capable but sends some data 
        traffic that will have the MAC address of the interface which will be the same as the 
        portID that is mentioned in this API and the chassisID will be empty 
      3. RX only endpoint which is not capable of sending any data to the network switches but 
        only receives LLDP sent from the switch , understands where it is connected to and relays
        the switch interface information to the RDS which is what is captured in the chassis ID and port ID
    body:
      type: !include schemas/netctrl-v1.0-endpoints-post-request.json
      example: !include ../examples/netctrl-v1.0-endpoints-post-request.json
    responses:
      201:
        body:
          description: Returned when the POST request is successful.
          type: !include schemas/netctrl-v1.0-endpoints-post-request.json
          example: !include ../examples/netctrl-v1.0-endpoints-post-201.json
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
        body:
          type: !include schemas/error.json

  /{endpointId}:
    uriParameters:
      endpointId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Endpoint.
      body:
        type: EmptySchema
      responses:
        200:
          body:
            type: !include schemas/endpoint.json
            example: !include ../examples/netctrl-v1.0-endpointid-get-200.json
        404:
          description: Returned when the requested endpoint with id does not exist.
          body:
            type: EmptySchema
    patch:
      description: Update an existing endpoint.
      body:
        example: !include ../examples/netctrl-v1.0-endpoints-post-request.json
        schema: !include schemas/netctrl-v1.0-endpoints-post-request.json
      responses:
        200:
          description: Returned when a PATCH request is successful in modifying the endpoint details.
          body:
            example: !include ../examples/netctrl-v1.0-endpoint-patch-200.json
        403:
          description: >
            Returned when a PATCH request is made against a non-persistent endpoint 
            which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
    delete:
      description: Delete an existing endpoint interface.
      responses:
        204:
          description: Returned when the Endpoint is successfully deleted. Empty response content
          body:
            type: EmptySchema
        403:
          description: >
            Returned when a DELETE request is made against a non-persistent endpoint
            which is managed by the Topology API and cannot be deleted
        404:
          description: Returned when the requested Endpoint ID does not exist

/applications:
  displayName: Create and manage aplication definitions.
  get:
    description: Retrieve all applications defined in the system. Limit result size with paging traits.
    responses:
      200:
        body:
          type: !include schemas/netctrl-v1.0-application-get-response.json
          example: !include ../examples/netctrl-v1.0-application-get-200.json
  post:
    description: Create or update an application. 
    body:
      type: !include schemas/netctrl-v1.0-application-post-request.json
      example: !include ../examples/netctrl-v1.0-application-post.json
    responses:
      200:
        description: Returned when this is an update request to existing appliation and the update is successful.
        body:
          type: !include schemas/netctrl-v1.0-application-post-response.json
          example: !include ../examples/netctrl-v1.0-application-post-200.json
        headers:
          Location:
            example: /netctrl/v1.0/application/9c51b3ec-1e95-40a5-b025-5dd8a941035f
      201:
        description: Returned when this is a create request and a new application is created successfully.
        body:
          type: !include schemas/netctrl-v1.0-application-post-response.json
          example: !include ../examples/netctrl-v1.0-application-post-201.json
        headers:
          Location:
            example: /netctrl/v1.0/application/a48937c5-1e0b-4ef1-9aab-52d332eda820
      400:
        description: >
          Returned when the POST request is incorrectly formatted or provided wrong value.
          Also returned when the dependent resource ids (endpoint id and network-device-id) do not exist.
        body:
          type: !include schemas/error.json
  /{applicationId}:
    uriParameters:
      applicationId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Retrieve a single application with the application guid.
      responses:
        200:
          body:
            type: !include schemas/netctrl-v1.0-application-get-response.json
            example: !include ../examples/netctrl-v1.0-application-id-get-200.json
        404:
          description: Returned when an application with the id does not exist.
          body:
            type: !include schemas/error.json
    patch:
      description: Modify an application identified by the application guid.
      body:
        type: !include schemas/netctrl-v1.0-application-post-request.json
        example: !include ../examples/netctrl-v1.0-application-post.json
      responses:
        200:
          description: Returned when the PATCH request is a success and the application has been modified.
          body:
            type: !include schemas/netctrl-v1.0-application-post-response.json
            example: !include ../examples/netctrl-v1.0-application-post-200.json
          headers:
            Location:
              example: /netctrl/v1.0/application/9c51b3ec-1e95-40a5-b025-5dd8a941035f
        400:
          description: Returned when the PATCH request is incorrectly formatted or missing values.
          body:
            type: !include schemas/error.json
        404:
          description: Returned when the application does not exist with the specified application guid.
    delete:
      description: Delete the application.
      responses:
        204:
          description: Returned when the application is successfully deleted. No response body.
        404:
          description: Returned when the application with the specified id does not exist.

/network-links:
  displayName: Network Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          type: !include schemas/networklinks.json
          example: !include ../examples/netctrl-v1.0-networklinks-get-200.json

/endpoint-links:
  displayName: Endpoint Links
  get:
    description: List all the links between network devices
    responses:
      200:
        body:
          type: !include schemas/endpointlinks.json
          example: !include ../examples/netctrl-v1.0-endpointlinks-get-200.json


/network-flows:
  displayName: Network flows
  get:
    description: >
      Retrieve all network flows, unicast and multicast.
      A paging restriction can be added to limit the number of returned results.
    responses:
      200:
        body: 
          type: !include schemas/netctrl-v1.0-network-flow-get-response.json
          example: !include ../examples/netctrl-v1.0-network-flow-get-200.json
  /unicast:
    displayName: Unicast Network flows
    get:
      description: >
        Retrieve all unicast network flows.
        A paging restriction can be added to limit the number of returned results.
      responses:
        200:
          body:
            type: !include schemas/netctrl-v1.0-network-flow-unicast-get-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-unicast-get-200.json
    post:
      description: Create or update a unicast network-flow. 
      body:
        type: !include schemas/netctrl-v1.0-network-flow-unicast-post-request.json
        example: !include ../examples/netctrl-v1.0-network-flow-unicast-post.json
      responses:
        200:
          description: >
            Returned when this is an update request to an existing unicast network-flow
            and the update is successful.
          body:
            type: !include schemas/netctrl-v1.0-network-flow-unicast-post-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-unicast-post-200.json
          headers:
            Location:
              example: /netctrl/v1.0/network-flows/unicast/3cf82ec2-25c1-47b5-b2b2-56ff47f83c95
        201:
          description: >
            Returned when this is a create request of a new unicast network-flow 
            and the creation is successful.
          body:
            type: !include schemas/netctrl-v1.0-network-flow-unicast-post-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-unicast-post-201.json
          headers:
            Location:
              example: /netctrl/v1.0/network-flows/unicast/e02fc143-701a-4922-a553-d3bd2585674a
        400:
          description: >
            Returned when the POST request is incorrectly formatted or has missing values.
            Also returned when the dependent resources (sender_id or receiver_id) do not exist.
          body:
            type: !include schemas/error.json
    /{id}:
      uriParameters:
        id:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          description: The globally unique identifier for the network-flow.
      get:
        description: Retrieve a single unicast network-flow with the specified guid.
        responses:
          200:
            body: 
              type: !include schemas/netctrl-v1.0-network-flow-unicast-id-get-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-unicast-id-get-200.json
          404:
            description: Returned when the network-flow with guid does not exist.
      patch:
        description: Update an existing unicast network-flow with the specified guid. 
        body:
          type: !include schemas/netctrl-v1.0-network-flow-unicast-post-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-unicast-post.json
        responses:
          200:
            description: Returned when the unicast network flow update is successful.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-unicast-post-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-unicast-post-200.json
            headers:
              Location:
                example: /netctrl/v1.0/network-flows/unicast/3cf82ec2-25c1-47b5-b2b2-56ff47f83c95
          400:
            description: >
              Returned when the PATCH request is incorrectly formatted or missing values.
              Also returned when the the sender or the receiver does not exist.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the network-flow with guid does not exist.
      delete:
        description: Delete the unicast network-flow with the specified guid.
        responses:
          200:
            description: Returned when the network-flow is successfully deleted. No response body.
          404:
            description: Returned when the network-flow with guid does not exist.

  /multicast:
    displayName: Multicast Network flow
    get:
      description: >
        Retrieve all the multicast network flows.
        A paging restriction can be added to limit the number of returned results.
      responses:
        200:
          body:
            body: !include schemas/netctrl-v1.0-network-flow-multicast-get-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-get-200.json
    post:
      description: Create or update a multicast network flow. 
      body:
        type: !include schemas/netctrl-v1.0-network-flow-multicast-post-request.json
        example: !include ../examples/netctrl-v1.0-network-flow-multicast-post.json
      responses:
        200:
          description: >
            Returned when this is an update request to an existing multicast network-flow
            and the update is successful.
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-post-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-post-200.json
          headers:
            Location:
              example: /netctrl/v1.0/network-flows/multicast/ad4c0cc5-68ca-4959-9ba6-e02848e80636
        201:
          description: >
            Returned when the request is to create a new unicast network-flow
            and the creation is successful.
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-post-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-post-201.json
          headers:
            Location:
              example: /netctrl/v1.0/network-flows/multicast/26650ca1-e460-40b2-8bb2-cbc2f822e8de
        400:
          description: >
            Returned when the POST request is incorrectly formatted or has missing values.
            Also returned when the dependent resources (senders or receivers) do not exist.
          body:
            type: !include schemas/error.json
    /{id}:
      uriParameters:
        id:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          description: The globally unique identifier for the multicast network-flow.
      get:
        description: Retrieve a single multicast network-flow with specified guid.
        responses:
          200:
            body: 
              type: !include schemas/netctrl-v1.0-network-flow-multicast-id-get-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-multicast-id-get-200.json
      patch:
        description: Update an existing multicast network-flow with the specified guid.
        body:
          type: !include schemas/netctrl-v1.0-network-flow-multicast-post-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-multicast-post.json
        responses:
          200:
            description: Returned when the multicast network-flow update is successful.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-multicast-post-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-multicast-post-200.json
            headers:
              Location:
                example: /netctrl/v1.0/network-flows/multicast/ad4c0cc5-68ca-4959-9ba6-e02848e80636
          400:
            description: >
              Returned when the PATCH request is incorrectly formatted or missing values.
              Also returned when the the senders or the receivers do not exist.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the network-flow with guid does not exist.
            body:
              type: !include schemas/error.json
      delete:
        description: Delete this multicast network-flow.
        responses:
          200:
            description: Returned when the network-flow is successfully deleted. No response body.
          404:
            description: Returned when the network-flow does not exist.
      /listener:
        get:
          description: Retrieve all listener(s) or receivers of this multicast network-flow.
          responses:
            200:
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-listener-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-listener-get-200.json
            404:
              description: Returned when the network-flow with id does not exist.
              body:
                type: !include schemas/error.json
        post:
          description: Add a new listener to this multicast flow. 
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-listener-post-request.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-listener-post.json
          responses:
            201:
              description: >
                Returned when the new listeners are added to this multicast network-flow.
                Returns the list of all registered listeners, including the new ones. 
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-listener-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-listener-post-201.json
            400:
              description: >
                Returned when the POST request is incorrectly formatted or missing values.
                Also when the listener ids dont exist or are not defined as destination applications. 
              body:
                type: !include schemas/error.json
        delete:
          description: Delete existing listener(s) of this multicast flow.
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-listener-delete-request.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-listener-delete.json
          responses:
            201:
              description: >
                Returned when the listeners are removed from this multicast network-flow.
                Returns the remaining destination application ids, empty list it none is left.
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-listener-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-listener-post-201.json
            400:
              description: >
                Returned when the POST request is incorrectly formatted or missing values.
                Also when the lisetner ids dont exist or are not destination applications. 
              body:
                type: !include schemas/error.json

