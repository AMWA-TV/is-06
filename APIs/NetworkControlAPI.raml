#%RAML 1.0

# AMWA-nmos Network Conrtoller API
# (c) ?

title: Topology
baseUri: http://example.api.com/x-nmos/netctrl/{version}
version: v1.0
mediaType: application/json
types:
  - NetworkDevice: !include schemas/networkdevice.json
    NetworkDevices: !include schemas/networkdevices.json
    Endpoint: !include schemas/endpoint.json
    Endpoints: !include schemas/endpoints.json
    NetworkLink: !include schemas/networklink.json
    NetworkLinks: !include schemas/networklinks.json
    EndpointLink: !include schemas/endpointlink.json
    EndpointLinks: !include schemas/endpointlinks.json
    EmptySchema: !include schemas/empty.json
    ErrorSchema: !include schemas/error.json
traits:
  - paged:
      description: API resources supporting pagination of results
      queryParameters:
        paging.since:
          description: Return results which have been created/updated since the time specified (non-inclusive) (seconds:nanoseconds)
          type: string
          pattern: "^[0-9]+:[0-9]+$"
        paging.until:
          description: Return results which were created/updated up until the time specified (inclusive) (seconds:nanoseconds)
          type: string
          pattern: "^[0-9]+:[0-9]+$"
        paging.limit:
          description: Limit the response results to this specified number. Implementations may specify default and maximum for the limit
          type: integer
        paging.order:
          description: Specify the order of the results, either resource creation time or last modified time. In both cases the response should be provided in descending order
          type: string
          enum: ["create", "update"]
          default: "update"
      responses:
        200:
          headers:
            Link:
              description: Provides references to cursors for paging. The 'rel' attribute may be one of 'next', 'prev', 'first' or 'last'
              type: string
              example: <http://example.api.com/x-nmos/netctrl/v1.0/applications/?paging.since=1441716353:6839634&paging.limit=20>; rel="next", <http://example.api.com/x-nmos/netctrl/v1.0/applications/?paging.until=1441716120:318744030&paging.limit=20>; rel="prev"
            X-Paging-Limit:
              description: Denotes the limit being used for paging. This may not match the requested value.
              type: integer
            X-Paging-Since:
              description: Denotes the value being used for 'paging.since', regardless of whether it is specified in the query. This value may be re-used as the paging.until value of a query to return the previous page of results. Combining this with the X-Paging-Until header value provides the absolute time bounds of the current returned data set.
              type: string
              example: 1442196353:7659634
            X-Paging-Until:
              description: Denotes the value being used for 'paging.until', regardless of whether it is specified in the query. This value may be re-used as the paging.since value of a query to return the next page of results. Combining this with the X-Paging-Since header value provides the absolute time bounds of the current returned data set.
              type: string
              example: 1442196120:93444030
  - rql:
      description: This resource MAY support advanced query formats using the Resource Query Language (RQL) syntax
      queryParameters:
        query.rql:
          description: RQL format string indicating the query to be performed, such as 'and(ge(version,urn:x-nmos:version:unicast),in(tags.location,(Salford,London)))'. Strings used as filter values MUST be URL encoded.
          type: string
      responses:
        400:
          description: The server not able to perform the query as it might be resource intensive.
        501:
          description: The query parameters specified are not currently supported by this implementation.

documentation:
  - title: Overview
    content: |
      These routines enable applications to learn about the topology managed by the network controller.
      The BC can get the topology at any time and can also register to receive the updates from the network. 
      The topology consists of network devices, its interfaces, links between devices and endpoints.
      While the network devices are discovered, the endpoints information is received by the NC through the PMN API.
      This is primarily because the vast majority of endpoints at this current time do not support any discovery
      protocol such as LLDP.

/:
  displayName: Base
  get:
    description: List the resources that can be accessed from the base url
    responses:
      200:
        body:
          example: !include ../examples/netctrl-v1.0-base-get-200.json

/network-devices:
  displayName: Network Devices
  get:
    is: [paged, rql]
    description: List all the network devices
    body:
      schema: EmptySchema
    queryParameters:
      id:
      version:
      name:
      serial_number:
      product_id:
      product_description:
      vendor:
    responses:
      200:
        body:
          type: !include schemas/networkdevices.json
          example: !include ../examples/netctrl-v1.0-networkdevices-get-200.json
  /{id}:
    uriParameters:
      id:
        type: string
    get:
      description: Get a single Network Device
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            type: !include schemas/networkdevice.json
            example: !include ../examples/netctrl-v1.0-networkdeviceid-get-200.json
        404:
          description: Returned when the requested Node ID does not exist
          body:
    patch:
      description: Update an existing endpoint interface
      body:
        type: !include schemas/netctrl-v1.0-networkdevice-patch-request.json
        example: !include ../examples/netctrl-v1.0-networkdevice-patch-request.json
      responses:
        200:
          description: Returned when the PATCH request is handled successfully
        403:
          description: >
            Returned when a PATCH request is made against a non-persistent endpoint which is 
            managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
      
/endpoints:
  displayName: Endpoints
  get:
    is: [paged, rql]
    description: List all the endpoint interfaces
    body:
      schema: EmptySchema
    queryParameters:
      id:
      version:
      chassis_id:
      port_id:
      network_device:
    responses:
      200:
        body:
          type: !include schemas/endpoints.json
          example: !include ../examples/netctrl-v1.0-endpoints-get-200.json
  post:
    description: >
      Register a new endpoint interface. The POST is invoked to inform the network controller
      about the presence of an endpoint interface connected to the network. There are three 
      types of endpoints --
      1. LLDP capable endpoints which advertise the chassis ID and port ID that is the same 
        that is same as the one mentioned in this API 
      2. Not LLDP capable but sends some data 
        traffic that will have the MAC address of the interface which will be the same as the 
        portID that is mentioned in this API and the chassisID will be empty 
      3. RX only endpoint which is not capable of sending any data to the network switches but 
        only receives LLDP sent from the switch , understands where it is connected to and relays
        the switch interface information to the RDS which is what is captured in the chassis ID and port ID
    body:
      type: !include schemas/netctrl-v1.0-endpoints-post-request.json
      example: !include ../examples/netctrl-v1.0-endpoints-post-request.json
    responses:
      201:
        body:
          description: Returned when the POST request is successful.
          type: !include schemas/netctrl-v1.0-endpoints-post-request.json
          example: !include ../examples/netctrl-v1.0-endpoints-post-201.json
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
        body:
          type: !include schemas/error.json

  /{endpointId}:
    uriParameters:
      endpointId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Endpoint.
      body:
        type: EmptySchema
      responses:
        200:
          body:
            type: !include schemas/endpoint.json
            example: !include ../examples/netctrl-v1.0-endpointid-get-200.json
        404:
          description: Returned when the requested endpoint with id does not exist.
          body:
            type: EmptySchema
    patch:
      description: Update an existing endpoint.
      body:
        type: !include schemas/netctrl-v1.0-endpoints-post-request.json
        example: !include ../examples/netctrl-v1.0-endpoints-post-request.json
      responses:
        200:
          description: Returned when a PATCH request is successful in modifying the endpoint details.
          body:
            example: !include ../examples/netctrl-v1.0-endpoint-patch-200.json
        403:
          description: >
            Returned when a PATCH request is made against a non-persistent endpoint 
            which is managed by the Topology API and cannot be upserted
        404:
          description: Returned when the requested Endpoint ID does not exist
    delete:
      description: Delete an existing endpoint interface.
      responses:
        204:
          description: Returned when the Endpoint is successfully deleted. Empty response content
          body:
            type: EmptySchema
        403:
          description: >
            Returned when a DELETE request is made against a non-persistent endpoint
            which is managed by the Topology API and cannot be deleted
        404:
          description: Returned when the requested Endpoint ID does not exist

/applications:
  displayName: Create and manage aplication definitions.
  get:
    is: [paged, rql]
    description: Retrieve all applications defined in the system. Limit result size with paging traits.
    body:
      schema: EmptySchema
    queryParameters:
      id:
      version:
      endpoint_id:
    responses:
      200:
        body:
          type: !include schemas/netctrl-v1.0-application-get-response.json
          example: !include ../examples/netctrl-v1.0-application-get-200.json
  post:
    description: Create or update an application. 
    body:
      type: !include schemas/netctrl-v1.0-application-post-request.json
      example: !include ../examples/netctrl-v1.0-application-post.json
    responses:
      200:
        description: Returned when this is an update request to existing appliation and the update is successful.
        body:
          type: !include schemas/netctrl-v1.0-application-post-response.json
          example: !include ../examples/netctrl-v1.0-application-post-200.json
        headers:
          Location:
            example: /x-nmos/netctrl/v1.0/application/9c51b3ec-1e95-40a5-b025-5dd8a941035f/
      201:
        description: Returned when this is a create request and a new application is created successfully.
        body:
          type: !include schemas/netctrl-v1.0-application-post-response.json
          example: !include ../examples/netctrl-v1.0-application-post-201.json
        headers:
          Location:
            example: /x-nmos/netctrl/v1.0/application/a48937c5-1e0b-4ef1-9aab-52d332eda820/
      400:
        description: >
          Returned when the POST request is incorrectly formatted or provided wrong value.
          Also returned when the dependent resource ids (endpoint id and network-device-id) do not exist.
        body:
          type: !include schemas/error.json
  /{applicationId}:
    uriParameters:
      applicationId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Retrieve a single application with the application guid.
      responses:
        200:
          body:
            type: !include schemas/netctrl-v1.0-application-get-response.json
            example: !include ../examples/netctrl-v1.0-application-id-get-200.json
        404:
          description: Returned when an application with the id does not exist.
          body:
            type: !include schemas/error.json
    patch:
      description: Modify an application identified by the application guid.
      body:
        type: !include schemas/netctrl-v1.0-application-post-request.json
        example: !include ../examples/netctrl-v1.0-application-post.json
      responses:
        200:
          description: Returned when the PATCH request is a success and the application has been modified.
          body:
            type: !include schemas/netctrl-v1.0-application-post-response.json
            example: !include ../examples/netctrl-v1.0-application-post-200.json
        400:
          description: Returned when the PATCH request is incorrectly formatted or missing values.
          body:
            type: !include schemas/error.json
        404:
          description: Returned when the application does not exist with the specified application guid.
    delete:
      description: Delete the application.
      responses:
        204:
          description: Returned when the application is successfully deleted. No response body.
        404:
          description: Returned when the application with the specified id does not exist.

/network-links:
  displayName: Network Links
  get:
    is: [paged, rql]
    description: List all the links between network devices
    body:
      schema: EmptySchema
    queryParameters:
      network_device_id:
      peer_network_device_id:
      network_interface:
      peer_network_interface:
      speed:
    responses:
      200:
        body:
          type: !include schemas/networklinks.json
          example: !include ../examples/netctrl-v1.0-networklinks-get-200.json

/endpoint-links:
  displayName: Endpoint Links
  get:
    is: [paged, rql]
    description: List all the links between network devices
    body:
      schema: EmptySchema
    queryParameters:
      network_device_id:
      network_interface:
      endpoint_id:
      speed:
    responses:
      200:
        body:
          type: !include schemas/endpointlinks.json
          example: !include ../examples/netctrl-v1.0-endpointlinks-get-200.json


/network-flows:
  displayName: Network flows
  get:
    is: [paged, rql]
    description: >
      Retrieve all network flows, unicast and multicast.
      A paging restriction can be added to limit the number of returned results.
    body:
      schema: EmptySchema
    queryParameters:
      id:
      version:
      description:
      tags:
      dscp:
      bandwidth.average:
      bandwidth.peak:
      type:
    responses:
      200:
        body: 
          type: !include schemas/netctrl-v1.0-network-flow-get-response.json
          example: !include ../examples/netctrl-v1.0-network-flow-get-200.json
  /unicast:
    displayName: Unicast Network flows
    get:
      is: [paged, rql]
      description: >
        Retrieve all unicast network flows.
        A paging restriction can be added to limit the number of returned results.
      body:
        schema: EmptySchema
      queryParameters:
        id:
        version:
        description:
        tags:
        dscp:
        bandwidth.average:
        bandwidth.peak:
        sender_app_id:
        receiver_app_id:
      responses:
        200:
          body:
            type: !include schemas/netctrl-v1.0-network-flow-unicast-get-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-unicast-get-200.json
    /{id}:
      uriParameters:
        id:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          description: The globally unique identifier for the network-flow.
          example: cfd02532-1c83-45a5-ae38-1cb7614346db
      get:
        description: Retrieve a single unicast network-flow with the specified guid.
        responses:
          200:
            body: 
              type: !include schemas/netctrl-v1.0-network-flow-unicast-id-get-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-unicast-id-get-200.json
          404:
            description: Returned when the network-flow with guid does not exist.
      put:
        description: >
          Create a unicast network flow with the specific guid. No subsequent PUT request
          should be made for this unicast flow. Subsequent PUT requests must return error.
          To update the flow, use PATCH request.
        body:
          type: !include schemas/netctrl-v1.0-network-flow-unicast-put-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-unicast-put.json
        responses:
          201:
            description: Returned when the unicast network flow created successfully.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-unicast-put-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-unicast-put-201.json
          400:
            description: >
              Returned when the PUT request is incorrectly formatted or has missing values.
              Also returned when the dependent resources (sender_app_id or receiver_app_id) do not exist.
            body:
              type: !include schemas/error.json
      patch:
        description: Update an existing unicast network-flow with the specified guid. 
        body:
          type: !include schemas/netctrl-v1.0-network-flow-unicast-patch-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-unicast-patch.json
        responses:
          200:
            description: Returned when the unicast network flow update is successful.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-unicast-patch-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-unicast-patch-200.json
          400:
            description: >
              Returned when the PATCH request is incorrectly formatted or missing values.
              Also returned when the the sender or the receiver does not exist.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the network-flow with guid does not exist.
      delete:
        description: Delete the unicast network-flow with the specified guid.
        responses:
          204:
            description: Returned when the network-flow is successfully deleted. No response body.
          404:
            description: Returned when the network-flow with guid does not exist.

  /multicast:
    displayName: Multicast Network flow
    get:
      is: [paged, rql]
      description: >
        Retrieve all the multicast network flows.
        A paging restriction can be added to limit the number of returned results.
      body:
        schema: EmptySchema
      queryParameters:
        id:
        version:
        description:
        tags:
        dscp:
        bandwidth.average:
        bandwidth.peak:
        multicast_group:
        multicast_port:
        igmp_enabled:
      responses:
        200:
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-get-response.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-get-200.json
    /{id}:
      uriParameters:
        id:
          type: string
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          description: The globally unique identifier for the multicast network-flow.
          example: d7b01965-6818-48e4-802c-2d9aab4df1d1
      get:
        description: Retrieve a single multicast network-flow with specified guid.
        responses:
          200:
            body: 
              type: !include schemas/netctrl-v1.0-network-flow-multicast-id-get-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-multicast-id-get-200.json
      put:
        description: >
          Create a multicast network flow with the specific id. No subsequent PUT request
          should be made for this multicast flow. To update the flow, use PATCH request.
          Subsequent PUT requests must return error. This is because a multicast flow
          can not be updated to change group id or port. For similar reasons, no POST
          request exist for /multicast api. 
        body:
          type: !include schemas/netctrl-v1.0-network-flow-multicast-put-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-multicast-put.json
        responses:
          201:
            description: Returned when the multicast flow is created successfully.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-multicast-put-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-multicast-put-201.json
          400:
            description: >
              Returned when the POST request is incorrectly formatted or has missing values.
              Also returned when the dependent resources (multicast group or port) do not exist
              are invalid.
            body:
              type: !include schemas/error.json
      patch:
        description: Update an existing multicast network-flow with the specified guid.
        body:
          type: !include schemas/netctrl-v1.0-network-flow-multicast-patch-request.json
          example: !include ../examples/netctrl-v1.0-network-flow-multicast-patch.json
        responses:
          200:
            description: Returned when the multicast network-flow update is successful.
            body:
              type: !include schemas/netctrl-v1.0-network-flow-multicast-put-response.json
              example: !include ../examples/netctrl-v1.0-network-flow-multicast-put-200.json
          400:
            description: >
              Returned when the PATCH request is incorrectly formatted or missing values.
            body:
              type: !include schemas/error.json
          404:
            description: Returned when the multicast flow with guid does not exist.
            body:
              type: !include schemas/error.json
      delete:
        description: Delete this multicast network-flow.
        responses:
          204:
            description: Returned when the network-flow is successfully deleted. No response body.
          404:
            description: Returned when the network-flow does not exist.
      /senders:
        get:
          is: [rql]
          description: Retrieve all senders of this multicast network-flow.
          responses:
            200:
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-sender-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-sender-get-200.json
            404:
              description: Returned when the multicast network-flow with id does not exist.
              body:
                type: !include schemas/error.json
        post:
          description: Add one new sender application to this multicast flow. 
          body:
            type: string
            pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
          responses:
            200:
              description: >
                Returned when the new sender application is added to this multicast network-flow.
                Returns the list of all registered senders, including the new one.
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-sender-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-sender-get-200.json
            400:
              description: >
                Returned when the POST request is incorrectly formatted or missing values.
              body:
                type: !include schemas/error.json
            404:
              description: >
                Returned when the multicast network-flow with id does not exist or the application
                can not be used as a sender.
              body:
                type: !include schemas/error.json
        /{senderId}:
          uriParameters:
          senderId:
            type: string
            pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
            description: >
              The globally unique identifier for a sender application of this multicast network-flow.
          delete:
            description: Remove one existing sender of this multicast flow.
            responses:
              204:
                description: >
                  Returned when the sender is successfully removed from this multicast flow.
                  No response body.
              404:
                description: >
                  Returned when no sender with sender id exists for this flow. 
                body:
                  type: !include schemas/error.json
      /receivers:
        get:
          is: [rql]
          description: Retrieve all receivers of this multicast network-flow.
          responses:
            200:
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-receiver-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-receiver-get-200.json
            404:
              description: Returned when the network-flow with id does not exist.
              body:
                type: !include schemas/error.json
        post:
          description: Add a new receiver to this multicast flow. 
          body:
            type: !include schemas/netctrl-v1.0-network-flow-multicast-receiver-post-request.json
            example: !include ../examples/netctrl-v1.0-network-flow-multicast-receiver-post.json
          responses:
            200:
              description: >
                Returned when the new receiver is successfully added for this multicast flow.
                Returns the list of all receivers, including the new one. 
              body: 
                type: !include schemas/netctrl-v1.0-network-flow-multicast-receiver-get-response.json
                example: !include ../examples/netctrl-v1.0-network-flow-multicast-receiver-get-200.json
            400:
              description: >
                Returned when the POST request is incorrectly formatted or missing values.
              body:
                type: !include schemas/error.json
            404:
              description: >
                Returned when the multicast network-flow with id does not exist or the application
                can not be used as a receiver or the sender the receiver requires is not a sender
                of this flow. 
              body:
                type: !include schemas/error.json
        /{receiverId}:
          uriParameters:
          receiverId:
            type: string
            pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
            description: >
              The globally unique identifier for a receiver application of this multicast network-flow.
          delete:
            description: >
              Remove an existing receiver of this multicast flow with specified receiver id.
            responses:
              204:
                description: >
                  Returned when the receiver is successfully removed from this multicast flow.
                  No response body.
              404:
                description: >
                  Returned when no receiver with receiver id exists for this flow. 
                body:
                  type: !include schemas/error.json

